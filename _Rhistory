install("pitDataR")
#read in detection data
get_detection_data <- function(detection_data){
setClass('myDate')
setAs("character", "myDate", function(from) as.POSIXct(from, format = "%m-%d-%Y %H:%M:%S"))
alldata <- read.csv(detection_data,
header = TRUE,
colClasses = c("factor", "myDate", "factor", "factor"))
#add date time columns
alldata <- add_datetime_columns(alldata)
return(alldata)
}
#add date columns with lubridate for use in querying by date
add_datetime_columns <- function(detection_dataframe){
require(lubridate)
detection_dataframe$year  <- year(detection_dataframe$detected_at)
detection_dataframe$month <- month(detection_dataframe$detected_at)
detection_dataframe$week  <- week(detection_dataframe$detected_at)
detection_dataframe$day   <- day(detection_dataframe$detected_at)
detection_dataframe$hour  <- hour(detection_dataframe$detected_at)
return(detection_dataframe)
}
#read in all tags
get_all_tags <- function(tags_text_file){
alltags <- read.csv(tags_text_file,
skip = 1,
blank.lines.skip = TRUE,
colClasses = c("NULL", "factor"),
header = FALSE
)
return(alltags)
}
ls()
getwd()
list.files()
alldata <- get_detection_data("BAtags.csv")
alltags <- get_all_tags("pits.csv")
setwd("./pitDataR")
getwd()
pitDataR::get_all_tags("pits.csv")
document()
detected_in_period <- function(data, start_date, end_date, resolution){
require(dplyr)
}
require(lubridate)
getwd()
list.dirs()
list.files()
end_date <- which.min(alldata$detected_at)
end_date
start_date <- which.min(alldata$detected_at)
end_date <- which.max(alldata$detected_at)
print(paste(start_date, end_date))
library(dplyr)
order_by(alldata, detected_at)
alldata %>% order_by(detected_at)
alldata %>% filter(tag %in% alltags$V2)
alldata %>% filter(tag %in% alltags$V2) order_by(detected_at)
detected_in_period <- function(data, start_date, end_date, known_tags = "NULL", resolution = "NULL"){
require(dplyr)
require(lubridate)
#convert character string start and end date to date class
setClass("startDate")
setClass("endDate")
setAs("character", "startDate", function(from) as.POSIXct(from, format = "%m-%d-%Y"))
setAs("character", "endDate", function(from) as.POSIXct(from, format = "%m-%d-%Y"))
selectedData <- filter(data, data$detected_at >= startDate & data$detected_at <= endDate)
}
detected_in_period(alldata, "02-01-2018", "12-31-2018")
detected_in_period <- function(data, start_date, end_date, known_tags = "NULL", resolution = "NULL"){
require(dplyr)
require(lubridate)
#convert character string start and end date to date class
setClass("startDate")
setClass("endDate")
setAs("character", "startDate", function(from) as.POSIXct(from, format = "%m-%d-%Y"))
setAs("character", "endDate", function(from) as.POSIXct(from, format = "%m-%d-%Y"))
start_date <- as.startDate(start_date)
selectedData <- filter(data, data$detected_at >= startDate & data$detected_at <= endDate)
}
detected_in_period(alldata, "02-01-2018", "12-31-2018")
detected_in_period <- function(data, as.Date(start_date, format = "%m-%d-%Y"), end_date, known_tags = "NULL", resolution = "NULL"){
require(dplyr)
require(lubridate)
#convert character string start and end date to date class
setClass("startDate")
setClass("endDate")
setAs("character", "startDate", function(from) as.POSIXct(from, format = "%m-%d-%Y"))
setAs("character", "endDate", function(from) as.POSIXct(from, format = "%m-%d-%Y"))
start_date <- as.startDate(start_date)
selectedData <- filter(data, data$detected_at >= startDate & data$detected_at <= endDate)
}
detected_in_period <- function(data, start_date, end_date, known_tags = "NULL", resolution = "NULL"){
require(dplyr)
require(lubridate)
#convert character string start and end date to date class
start_date <- as.Date(start_date, format = "%m-%d-%Y")
end_date <- as.Date(end_date, format = "%m-%d-%Y")
selectedData <- filter(data, data$detected_at >= startDate & data$detected_at <= endDate)
}
only_Detected <- detected_in_period(alldata, "02-01-2018", "12-31-2018")
detected_in_period <- function(data, start_date, end_date, known_tags = "NULL", resolution = "NULL"){
require(dplyr)
require(lubridate)
#convert character string start and end date to date class
start_date <- as.Date(start_date, format = "%m-%d-%Y")
end_date <- as.Date(end_date, format = "%m-%d-%Y")
selectedData <- filter(data, data$detected_at >= start_date & data$detected_at <= end_date)
}
only_Detected <- detected_in_period(alldata, "02-01-2018", "12-31-2018")
only_Detected <- detected_in_period(alldata, "02-01-2018", "7-31-2018")
only_Detected <- detected_in_period(alldata, "06-01-2018", "7-31-2018")
only_Detected <- detected_in_period(alldata, "07-01-2018", "7-31-2018")
?detected_in_period
?pitDataR::detected_in_period
detected_in_period <- function(data, start_date, end_date, known_tags, resolution = "NULL"){
require(dplyr)
require(lubridate)
#convert character string start and end date to date class
start_date <- as.Date(start_date, format = "%m-%d-%Y")
end_date <- as.Date(end_date, format = "%m-%d-%Y")
#subset data to only specified days
selectedData <- data %>%
filter(detected_at >= start_date & detected_at <= end_date) %>%
filter(tag %in% known_tags)
}
only_Detected <- detected_in_period(alldata, "07-01-2018", "7-31-2018", alltags)
detected_in_period <- function(data, start_date, end_date, known_tags = "NULL", resolution = "NULL"){
require(dplyr)
require(lubridate)
#convert character string start and end date to date class
start_date <- as.Date(start_date, format = "%m-%d-%Y")
end_date <- as.Date(end_date, format = "%m-%d-%Y")
#subset data to only specified days
selectedData <- data %>%
filter(detected_at >= start_date & detected_at <= end_date) #%>%
#filter(tag %in% known_tags)
}
only_Detected <- detected_in_period(alldata, "07-01-2018", "7-31-2018")
str(only_Detected)
str(alltags)
table(only_Detected$tag %in% alltags$V2)
#read in all tags
get_all_tags <- function(tags_text_file){
alltags <- read.csv(tags_text_file,
skip = 1,
blank.lines.skip = TRUE,
colClasses = c("NULL", "factor"),
header = FALSE,
col.names = c("tag")
)
return(alltags)
}
get_all_tags("pits.csv")
#read in all tags
get_all_tags <- function(tags_text_file){
alltags <- read.csv(tags_text_file,
skip = 1,
blank.lines.skip = TRUE,
colClasses = c("NULL", "factor"),
header = FALSE,
col.names = c("","tag")
)
return(alltags)
}
get_all_tags("pits.csv")
detected_in_period <- function(data, start_date, end_date, known_tags, resolution = "NULL"){
require(dplyr)
require(lubridate)
#convert character string start and end date to date class
start_date <- as.Date(start_date, format = "%m-%d-%Y")
end_date <- as.Date(end_date, format = "%m-%d-%Y")
#subset data to only specified days
selectedData <- data %>%
filter(detected_at >= start_date & detected_at <= end_date) %>%
filter(tag %in% known_tags$tag)
}
only_Detected <- detected_in_period(alldata, "07-01-2018", "7-31-2018", alltags)
library(roxygen2)
install("pitDataR")
install.packages("pitDataR")
getwd()
list.dirs()
install.packages("pitDataR")
library(pitDataR)
getwd()
list.files()
#function to get date in correct format
#format can be changed to get correct
setClass('myDate')
setAs("character", "myDate", function(from) as.POSIXct(from, format = "%m-%d-%Y %H:%M:%S"))
#read in detection data
get_detection_data <- function(detection_data){
setClass('myDate')
setAs("character", "myDate", function(from) as.POSIXct(from, format = "%m-%d-%Y %H:%M:%S"))
alldata <- read.csv(detection_data,
header = TRUE,
colClasses = c("factor", "myDate", "factor", "factor"))
#add date time columns
alldata <- add_datetime_columns(alldata)
return(alldata)
}
#add date columns with lubridate for use in querying by date
add_datetime_columns <- function(detection_dataframe){
require(lubridate)
detection_dataframe$year  <- year(detection_dataframe$detected_at)
detection_dataframe$month <- month(detection_dataframe$detected_at)
detection_dataframe$week  <- week(detection_dataframe$detected_at)
detection_dataframe$day   <- day(detection_dataframe$detected_at)
detection_dataframe$hour  <- hour(detection_dataframe$detected_at)
return(detection_dataframe)
}
#read in all tags
get_all_tags <- function(tags_text_file){
alltags <- read.csv(tags_text_file,
skip = 1,
blank.lines.skip = TRUE,
colClasses = c("NULL", "factor"),
header = FALSE,
col.names = c("","tag")
)
return(alltags)
}
alltags <- get_all_tags("pits.csv")
alldata <- get_detection_data("BAtags.csv")
setwd("..")
list.dirs()
install.packages("pitDataR")
install.packages("pitDataR")
library(pitDataR)
getwd()
setwd("./pitDataR")
)
setwd("./pitDataR")
setwd("pitDataR")
list.dirs()
list.files()
detected_in_period(alldata, "07-01-2018", "07-31-2018")
detected_only <- detected_in_period(alldata, "07-01-2018", "07-31-2018")
library(dplyr)
detected <- detected_only[detected_only$tag %in% alltags$tag,]
detected[unique(detected$tag),]
trash_bucket <- c("a", "d", "d", "a", "c")
distinct(trash_bucket)
unique(trash_bucket)
detected[unique(as.Character(detected$tag)),]
detected[unique(as.character(detected$tag)),]
nrow(detected)
nrow(detected[unique(detected$tag),])
detected$tag[unique(detected$tag)]
detected$tag
detected %>% group_by(tag)
detected_by_tag <- detected %>% group_by(tag)
detected_by_tag$tag
library(pitDataR)
alldata <- get_detection_data("BAtags.csv")
detected_only <- detected_in_period(alldata, "07-01-2018", "07-31-2018")
unique(detected_only$tag)
detected_in_period
detected_in_period <- function(data, start_date, end_date, known_tags = "NULL", resolution = "NULL"){
require(dplyr)
require(lubridate)
#convert character string start and end date to date class
start_date <- as.Date(start_date, format = "%m-%d-%Y")
end_date <- as.Date(end_date, format = "%m-%d-%Y")
#subset data to only specified days
selectedData <- data %>%
filter(detected_at >= start_date & detected_at <= end_date) %>%
filter(tag %in% known_tags$tag)
#group by selected
}
detected_only <- detected_in_period(alldata, "07-01-2018", "07-31-2018")
detected_only <- detected_in_period(alldata, "07-01-2018", "07-31-2018", alltags)
detected_in_period <- function(data, start_date, end_date, known_tags = "NULL", resolution = "NULL"){
require(dplyr)
require(lubridate)
#convert character string start and end date to date class
start_date <- as.Date(start_date, format = "%m-%d-%Y")
end_date <- as.Date(end_date, format = "%m-%d-%Y")
#subset data to only specified days
selectedData <- data %>%
filter(detected_at >= start_date & detected_at <= end_date) #%>%
#filter(tag %in% known_tags$tag)
#group by selected
}
detected_only <- detected_in_period(alldata, "07-01-2018", "07-31-2018")
table(detected_only %in% alltags$tag)
names(alltags)
unique_detected <- unique(detected_only$tag)
library(pitDataR)
pitDataR::get_detection_data("BAtags.csv")
pitDataR::get_detection_data("BAtags.csv")
ls
ls()
alice <- c("barry", "charles", "donna")
for(i in 2:length(alice)-1){
print(paste(alice[i], alice[i +1]))
}
friends <- data.frame(pairs = "a")
friends
for(i in 2:length(alice)-1){
print(paste(alice[i], alice[i +1]))
}
for(i in 2:length(alice)-1){
friends
print(paste(alice[i], alice[i +1]))
}
library(devtools)
devtools::document()
devtools::load_all(".")
ls()
list.files()
hbc_tags <- read.csv("HBCtags.csv")
hbc_tags
hbc_tags$species <- "HBC_translocated"
hbc_tags <- hbc_tags[,c(2, 3)]
head(hbc_tags)
colnames(hbc_tags) <- c("tag", "species")
head(hbc_tags)
alltags <- hbc_tags[,1]
data1 <- get_detection_data("BAtags.csv")
data2 <- get_detection_data("BAtags2.csv")
alldata <- rbind(data1, data2)
alldata <- add_all_tags(alldata, alltags)
devtools::load_all(".")
alldata <- add_all_tags(alldata, alltags)
devtools::load_all(".")
only_tags_of_interest
devtools::load_all(".")
only_tags_of_interest
library(pitDataR)
only_tags_of_interest
only_tags_of_interest
devtools::load_all(".")
only_tags_of_interest
devtools::load_all(".")
only_tags_of_interest
alldata <- add_all_tags(alldata, alltags)
alltags <- hbc_tags
alldata <- add_all_tags(alldata, alltags)
str(alldata)
td <- c("06-01-2018", "06-07-2018", "06-14-2018", "06-21-2018", "06-28-2018")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
henry
devtools::load_all(".")
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
henry
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
henry
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
str(henry)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
?colnames
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
henry
?tidyr::replace_na
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
devtools::load_all(".")
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
henry
source('~/repo/fisheries/pitDataR/R/generate_data_for_survival_analysis.R')
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
henry
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
henry
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
henry
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
henry
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
henry
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
henry
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
devtools::load_all(".")
head(henry)
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
as.numeric(henry[,3])
henry %>% tidyr::replace_na(3 = FALSE)
devtools::load_all(".")
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
henry <- cbind(henry[ ,1], henry[ ,c(2:ncol(henry)]) * 1)
henry <- cbind(henry[ ,1], henry[ ,c(2:ncol(henry))] * 1)
henry
library(pitDataR)
remove(generate_data_for_survival_analysis)
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
head(henry)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
source('~/repo/fisheries/pitDataR/R/generate_data_for_survival_analysis.R')
devtools::load_all(".")
henry <- generate_data_for_survival_analysis(alldata, alltags, td)
